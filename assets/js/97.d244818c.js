(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{191:function(v,_,s){"use strict";s.r(_);var t=s(0),e=Object(t.a)({},(function(){var v=this.$createElement;this._self._c;return this._m(0)}),[function(){var v=this,_=v.$createElement,s=v._self._c||_;return s("div",{staticClass:"content"},[s("p",[v._v("单处理器进程"),s("strong",[v._v("调度策略")])]),v._v(" "),s("h2",{attrs:{id:"先到先得-first-come-first-served-fcfs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#先到先得-first-come-first-served-fcfs"}},[v._v("#")]),v._v(" 先到先得(First-Come-First-Served, FCFS)")]),v._v(" "),s("ul",[s("li",[s("strong",[v._v("FCFS 对"),s("code",[v._v("短进程")]),v._v("不利")]),v._v("。长进程长时间霸占CPU资源。")]),v._v(" "),s("li",[s("strong",[v._v("FCFS 对"),s("code",[v._v("I/O密集")]),v._v("不利")]),v._v("。I/O密集型进程(这里特指同步I/O)在进行I/O操作时，会阻塞休眠，这会导致进程重新被放入就绪队列，等待下一次被宠幸。")])]),v._v(" "),s("h2",{attrs:{id:"轮转"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#轮转"}},[v._v("#")]),v._v(" 轮转")]),v._v(" "),s("p",[v._v("这是一种基于时钟的"),s("strong",[v._v("抢占策略")]),v._v("，这也是抢占策略中最简单的一种: "),s("strong",[v._v("公平地给每一个进程一定的执行时间，当时间消耗完毕或阻塞，操作系统就会调度其他进程，将执行权抢占过来")]),v._v("。")]),v._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),s("p",[s("strong",[v._v("决策模式")]),v._v(": "),s("code",[v._v("抢占策略")]),v._v("相对应的有"),s("code",[v._v("非抢占策略")]),v._v("，非抢占策略指的是让进程运行直到结束、阻塞(如I/O或睡眠)、或者主动让出控制权；抢占策略支持中断正在运行的进程，将主动权掌握在操作系统这里，不过通常开销会比较大。")])]),v._v(" "),s("p",[v._v("这种调度策略的要点是"),s("strong",[v._v("确定合适的时间片长度")]),v._v("： 太长了，长进程霸占太久资源，其他进程会得不到响应(等待执行时间过长)，这时候就跟上述的 "),s("code",[v._v("FCFS")]),v._v(" 没什么区别了;  太短了也不好，因为进程抢占和切换都是需要成本的，而且成本不低，时间片太短，时间可能都浪费在上下文切换上了，导致进程干不了什么实事。")]),v._v(" "),s("p",[v._v("因此"),s("strong",[v._v("时间片的长度最好符合大部分进程完成一次典型交互所需的时间")]),v._v("。")]),v._v(" "),s("p",[v._v("另外和"),s("code",[v._v("FCFS")]),v._v("一样，轮转策略对"),s("strong",[v._v("I/O进程")]),v._v("还是不公平。")]),v._v(" "),s("h2",{attrs:{id:"最短进程优先-shortest-process-next-spn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最短进程优先-shortest-process-next-spn"}},[v._v("#")]),v._v(" 最短进程优先(Shortest Process Next, SPN)")]),v._v(" "),s("p",[v._v("上面说了"),s("code",[v._v("先到先得")]),v._v("策略对"),s("code",[v._v("短进程")]),v._v("不公平，"),s("code",[v._v("最短进程优先")]),v._v("索性就让'最短'的进程优先执行，也就是说: "),s("strong",[v._v("按照进程的预估执行时间对进程进行优先级排序，先执行完短进程，后执行长进程。这是一种非抢占策略")]),v._v("。")]),v._v(" "),s("p",[v._v("这样可以让短进程能得到较快的响应。但是怎么获取或者"),s("strong",[v._v("评估进程执行时间")]),v._v("呢？一是让程序的提供者提供，这不太靠谱；二是由操作系统来收集进程运行数据，并对它们进程统计分析。例如最简单的是计算它们的平均运行时间。不管怎么说都比上面两种策略要复杂一点。")]),v._v(" "),s("p",[s("code",[v._v("SPN")]),v._v(" 的缺陷是："),s("strong",[s("code",[v._v("长进程饥饿")])]),v._v("，如果系统有大量的短进程，那么长进程可能会饥饿得不到响应。")]),v._v(" "),s("p",[v._v("另外因为它不是抢占性策略， 尽管现在短进程可以得到更多的执行机会，但是还是没有解决 "),s("code",[v._v("FCFS")]),v._v(" 的问题： 一旦长进程得到CPU资源，得等它执行完，导致后面的进程得不到响应。")]),v._v(" "),s("h2",{attrs:{id:"最短剩余时间-shortest-remaining-time-srt"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最短剩余时间-shortest-remaining-time-srt"}},[v._v("#")]),v._v(" 最短剩余时间(Shortest Remaining Time, SRT)")]),v._v(" "),s("p",[s("strong",[v._v("SRT 进一步优化了 SPN，增加了抢占机制")]),v._v("。在 SPN 的基础上，当一个进程添加到就绪队列时，操作系统会比较"),s("em",[v._v("刚添加的新进程")]),v._v("和"),s("em",[v._v("当前正在执行的老进程")]),v._v("的**"),s("code",[v._v("剩余时间")]),v._v("**，如果新进程剩余时间更短，新进程就会抢占老进程。")]),v._v(" "),s("p",[v._v("相比轮转的抢占，SRT 没有中断处理的开销。但是在 SPN 的基础上，操作系统需要记录进程的历史执行时间，这是新增的开销。"),s("strong",[v._v("另外长进程饥饿问题还是没有解决")]),v._v("。")]),v._v(" "),s("h2",{attrs:{id:"最高响应比优先-hrrn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最高响应比优先-hrrn"}},[v._v("#")]),v._v(" 最高响应比优先(HRRN)")]),v._v(" "),s("p",[s("strong",[v._v("为了解决长进程饥饿问题，同时提高进程的响应速率")]),v._v("。还有一种"),s("code",[v._v("最高响应比优先的")]),v._v("策略，首先了解什么是响应比:")]),v._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[v._v("响应比 = （等待执行时间 + 进程执行时间） / 进程执行时间\n复制代码\n")])]),v._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[v._v("1")]),s("br"),s("span",{staticClass:"line-number"},[v._v("2")]),s("br")])]),s("p",[s("strong",[v._v("这种策略会选择响应比最高的进程优先执行")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("对于短进程来说，因为执行时间很短，分母很小，所以响应比比较高，会被优先执行")]),v._v(" "),s("li",[v._v("对于长进程来说，执行时间长，一开始响应比小，但是随着等待时间增长，它的优先级会越来越高，最终可以被执行")])]),v._v(" "),s("h2",{attrs:{id:"反馈法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反馈法"}},[v._v("#")]),v._v(" 反馈法")]),v._v(" "),s("p",[v._v("SPN、SRT、HRRN 都需要对进程时间进行评估和统计，实现比较复杂且需要一定开销。而反馈法采取的是"),s("strong",[v._v("事后反馈")]),v._v("的方式。这种策略下: "),s("strong",[v._v("每个进程一开始都有相同的优先级，每次被抢占(需要配合其他抢占策略使用，如轮转)，优先级就会降低一级。因此通常它会根据优先级划分多个队列")]),v._v("。")]),v._v(" "),s("p",[v._v("举个例子:")]),v._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[v._v("队列1\n队列2\n...\n队列N\n复制代码\n")])]),v._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[v._v("1")]),s("br"),s("span",{staticClass:"line-number"},[v._v("2")]),s("br"),s("span",{staticClass:"line-number"},[v._v("3")]),s("br"),s("span",{staticClass:"line-number"},[v._v("4")]),s("br"),s("span",{staticClass:"line-number"},[v._v("5")]),s("br")])]),s("p",[v._v("新增的任务会推入"),s("code",[v._v("队列1")]),v._v("，"),s("code",[v._v("队列1")]),v._v("会按照"),s("code",[v._v("轮转策略")]),v._v("以一个时间片为单位进行调度。短进程可以很快得到响应，而对于长进程可能一个时间片处理不完，就会被抢占，放入"),s("code",[v._v("队列2")]),v._v("。")]),v._v(" "),s("p",[s("code",[v._v("队列2")]),v._v("会在"),s("code",[v._v("队列1")]),v._v("任务清空后被执行，有时候低优先级队列可能会等待很久才被执行，所以一般会给予一定的补偿，例如增加执行时间，所以"),s("code",[v._v("队列2")]),v._v("的轮转时间片长度是2。")]),v._v(" "),s("p",[v._v("反馈法仍然可能导致长进程饥饿，所以操作系统可以统计长进程的等待时间，当等待时间超过一定的阈值，可以选择提高它们的优先级。")]),v._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/21/16deecc24dfd080c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"img"}})]),v._v(" "),s("p",[v._v("没有一种调度策略是万能的, 它需要考虑很多因素:")]),v._v(" "),s("ul",[s("li",[v._v("响应速率。进程等待被执行的时间")]),v._v(" "),s("li",[v._v("公平性。兼顾短进程、长进程、I/O进程")])]),v._v(" "),s("p",[v._v("这两者在某些情况下是对立的，提高了响应，可能会减低公平性，导致饥饿。短进程、长进程、I/O进程之间要取得平衡也非常难。")]),v._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[v._v("WARNING")]),v._v(" "),s("p",[v._v("现实世界操作系统的进程调度算法比教科书上说的要复杂的多")])])])}],!1,null,null,null);_.default=e.exports}}]);